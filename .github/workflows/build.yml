name: build

on:
  push:
    branches:
      - 'master'
    tags:
      - '*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.2
      -
        name: Prepare
        id: prepare
        run: |
          DOCKER_USERNAME=crazymax
          DOCKER_IMAGE=crazymax/nextcloud
          DOCKER_PLATFORMS=linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x
          DOCKER_FILE=Dockerfile-19
          VERSION=edge
          LATEST=$(cat .latest)
          DOCKER_PUSH=false

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=${TAG%-*}
            DOCKER_FILE=Dockerfile-${TAG%%.*}
            DOCKER_PUSH=true
          fi
          if [ "$VERSION" == "edge" ] && [ "$DOCKER_FILE" == "Dockerfile-19" ]; then
            DOCKER_PUSH=true
          fi

          TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
          if [ "$VERSION" == "$(cat .latest)" ]; then
            TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
          fi

          echo ::set-output name=docker_username::${DOCKER_USERNAME}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=docker_push::${DOCKER_PUSH}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            ${TAGS} --file ${DOCKER_FILE} .
      -
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3.2.0
      -
        name: Docker Buildx (build)
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}
      -
        name: Docker Login
        if: success() && github.event_name != 'pull_request' && steps.prepare.outputs.docker_push == 'true' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin
      -
        name: Docker Buildx (push)
        if: success() && github.event_name != 'pull_request' && steps.prepare.outputs.docker_push == 'true' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
      -
        name: Docker Check Manifest
        if: success() && github.event_name != 'pull_request' && steps.prepare.outputs.docker_push == 'true' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        run: |
          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
      -
        name: Clear
        if: always() && github.event_name != 'pull_request' && steps.prepare.outputs.docker_push == 'true' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        run: |
          rm -f ${HOME}/.docker/config.json
