name: test

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

env:
  BUILD_TAG: test
  CONTAINER_NAME: nextcloud
  RUNNING_TIMEOUT: 120
  RUNNING_LOG_CHECK: ready to handle connections

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        docker_file:
          - Dockerfile-23
          - Dockerfile-24
          - Dockerfile-25
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Docker Build
        uses: docker/bake-action@v2
        with:
          targets: image-local
        env:
          DEFAULT_TAG: ${{ env.BUILD_TAG }}
          DOCKERFILE: ${{ matrix.docker_file }}
      -
        name: Create network
        run: |
          docker network create -d bridge ${{ env.CONTAINER_NAME }}
      -
        name: Start MariaDB container
        run: |
          docker run -d --name mariadb --hostname mariadb \
            --network ${{ env.CONTAINER_NAME }} \
            -e "MYSQL_ALLOW_EMPTY_PASSWORD=yes" \
            -e "MYSQL_DATABASE=nextcloud" \
            -e "MYSQL_USER=nextcloud" \
            -e "MYSQL_PASSWORD=asupersecretpassword" \
            mariadb:10.5
      -
        name: Start container
        run: |
          docker run -d --name ${{ env.CONTAINER_NAME }} \
            --link mariadb \
            --network ${{ env.CONTAINER_NAME }} \
            -e "DB_HOST=mariadb" \
            -e "DB_NAME=nextcloud" \
            -e "DB_USER=nextcloud" \
            -e "DB_PASSWORD=asupersecretpassword" \
            ${{ env.BUILD_TAG }}
      -
        name: Test run
        run: |
          TIMEOUT=$((SECONDS + ${{ env.RUNNING_TIMEOUT }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ env.RUNNING_LOG_CHECK }}"* ]]; then
              echo "Container up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "Failed to run ${{ env.CONTAINER_NAME }} container"
              exit 1
            fi
          done < <(docker logs -f ${{ env.CONTAINER_NAME }} 2>&1)

          CONTAINER_STATUS=$(docker container inspect --format "{{.State.Status}}" ${{ env.CONTAINER_NAME }})
          if [[ ${CONTAINER_STATUS} != "running" ]]; then
            >&2 echo "Container ${{ env.CONTAINER_NAME }} returned status '$CONTAINER_STATUS'"
            exit 1
          fi
      -
        name: Container logs
        if: always()
        run: |
          docker logs ${{ env.CONTAINER_NAME }}
          docker rm -f ${{ env.CONTAINER_NAME }} > /dev/null 2>&1 || true
