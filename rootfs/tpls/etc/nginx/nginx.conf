# similar to https://github.com/nextcloud/docker/blob/master/.examples/docker-compose/with-nginx-proxy/mariadb/fpm/web/nginx.conf

pid /var/run/nginx/nginx.pid;
worker_processes auto;
error_log /proc/self/fd/2 info;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include mime.types;
    default_type application/octet-stream;
    types {
        text/javascript mjs;
        application/wasm wasm;
    }

    aio threads;
    sendfile on;
    keepalive_timeout 15;
    keepalive_disable msie6;
    keepalive_requests 100;
    gzip off;

    ## Temp folders
    client_body_temp_path /tmp/nginx 1 2;
    proxy_temp_path /tmp/nginx-proxy;
    fastcgi_temp_path /tmp/nginx-fastcgi;
    uwsgi_temp_path /tmp/nginx-uwsgi;
    scgi_temp_path /tmp/nginx-scgi;

    ## Handling of IPs in proxied and load balancing situations
    set_real_ip_from @REAL_IP_FROM@;
    real_ip_header @REAL_IP_HEADER@;

    # Log
    log_format main '$@LOG_IP_VAR@ - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';
    access_log /proc/self/fd/1 main;

    # Set the `immutable` cache control options only for assets with a cache busting `v` argument
    map $arg_v $asset_immutable {
        "" "";
    default ", immutable";
    }

    ## TCP options
    tcp_nopush  on;
    tcp_nodelay on;

    ## Hide the Nginx version number
    server_tokens off;

    ## Proxy
    proxy_request_buffering off;

    server {
        listen 127.0.0.1:12345;
        server_name _;

        access_log off;
        error_log /dev/null;

        location / {
            return 500;
        }

        location ~ ^/(status|ping)$ {
            allow 127.0.0.1;
            deny all;
            fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;
            fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;
            include fastcgi_params;
            fastcgi_param SERVER_SOFTWARE "";
        }
    }

    # https://docs.nextcloud.com/server/stable/admin_manual/installation/nginx.html
    server {
        listen 8000;
        listen [::]:8000;

        root /var/www;
        index index.php index.html;

        client_max_body_size @UPLOAD_MAX_SIZE@;
        client_body_timeout @BODY_TIMEOUT@;
        fastcgi_buffers 64 4K;
        large_client_header_buffers 4 16k;

        # The settings allows you to optimize the HTTP2 bandwidth.
        # See https://blog.cloudflare.com/delivering-http-2-upload-speed-improvements/
        # for tuning hints
        client_body_buffer_size 512k;

        # Enable gzip but do not remove ETag headers
        gzip on;
        gzip_vary on;
        gzip_comp_level 4;
        gzip_min_length 256;
        gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
        gzip_types application/atom+xml text/javascript application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/wasm application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

        # https://docs.nextcloud.com/server/stable/admin_manual/installation/harden_server.html
        # HTTP response headers
        add_header Strict-Transport-Security          "@HSTS_HEADER@";
        add_header Referrer-Policy                    "@RP_HEADER@"           always;
        add_header X-Content-Type-Options             "nosniff"               always;
        add_header X-Download-Options                 "noopen"                always;
        add_header X-Frame-Options                    "@XFRAME_OPTS_HEADER@"  always;
        add_header X-Permitted-Cross-Domain-Policies  "none"                  always;
        add_header X-Robots-Tag                       "noindex, nofollow"     always;
        add_header X-XSS-Protection                   "1; mode=block"         always;

        # Remove X-Powered-By, which is an information leak
        fastcgi_hide_header X-Powered-By;

        # Specify how to handle directories -- specifying `/index.php$request_uri`
        # here as the fallback means that Nginx always exhibits the desired behaviour
        # when a client requests a path that corresponds to a directory that exists
        # on the server. In particular, if that directory contains an index.php file,
        # that file is correctly served; if it doesn't, then the request is passed to
        # the front-end controller. This consistent behaviour means that we don't need
        # to specify custom rules for certain paths (e.g. images and other assets,
        # `/updater`, `/ocm-provider`, `/ocs-provider`), and thus
        # `try_files $uri $uri/ /index.php$request_uri`
        # always provides the desired behaviour.
        index index.php index.html /index.php$request_uri;

        # Handle Microsoft DAV clients
        location = / {
            if ( $http_user_agent ~ ^DavClnt ) {
                return 302 @REDIRECT_URL@/remote.php/webdav/$is_args$args;
            }
        }

        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        # Make a regex exception for `/.well-known` so that clients can still
        # access it despite the existence of the regex rule
        # `location ~ /(\.|autotest|...)` which would otherwise handle requests
        # for `/.well-known`.
        location ^~ /.well-known {
            # The rules in this block are an adaptation of the rules
            # in `.htaccess` that concern `/.well-known`.

            location = /.well-known/carddav { return 301 @REDIRECT_URL@/remote.php/dav/; }
            location = /.well-known/caldav { return 301 @REDIRECT_URL@/remote.php/dav/; }
            location /.well-known/acme-challenge { try_files $uri $uri/ =404; }
            location /.well-known/pki-validation { try_files $uri $uri/ =404; }

            # Let Nextcloud's API for `/.well-known` URIs handle all other
            # requests by passing them to the front-end controller.
            return 301 @REDIRECT_URL@/index.php$request_uri;
        }

        location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/) {
            return 404;
        }

        location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
            return 404;
        }

        # Ensure this block, which passes PHP files to the PHP process, is above the blocks
        # which handle static assets (as seen below). If this block is not declared first,
        # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
        # to the URI, resulting in a HTTP 500 error response.
        location ~ \.php(?:$|/) {
            # Required for legacy support
            rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|ocs-provider\/.+|.+\/richdocumentscode(_arm64)?\/proxy) /index.php$request_uri;

            fastcgi_split_path_info ^(.+?\.php)(\/.*|)$;
            set $path_info $fastcgi_path_info;

            try_files $fastcgi_script_name =404;

            include fastcgi_params;
            fastcgi_param SERVER_SOFTWARE "";
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $path_info;

            fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
            fastcgi_param front_controller_active true;     # Enable pretty urls
            fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;

            fastcgi_intercept_errors on;
            fastcgi_request_buffering off;

            fastcgi_max_temp_file_size 0;
        }

        # Serve static files
        location ~ \.(?:css|js|mjs|svg|gif|ico|jpg|png|webp|wasm|tflite|map|ogg|flac)$ {
            try_files $uri /index.php$request_uri;
            add_header Cache-Control "public, max-age=15778463$asset_immutable";
            add_header Referrer-Policy                   "@RP_HEADER@"          always;
            add_header X-Content-Type-Options            "nosniff"              always;
            add_header X-Frame-Options                   "@XFRAME_OPTS_HEADER@" always;
            add_header X-Permitted-Cross-Domain-Policies "none"                 always;
            add_header X-Robots-Tag                      "noindex, nofollow"    always;
            add_header X-XSS-Protection                  "1; mode=block"        always;
            access_log off;
        }

        location ~ \.woff2?$ {
            try_files $uri /index.php$request_uri;
            expires 7d;
            access_log off;
        }

        # Rule borrowed from `.htaccess`
        location /remote {
            return 301 @REDIRECT_URL@/remote.php$request_uri;
        }

        location / {
            try_files $uri $uri/ /index.php$request_uri;
        }
    }
}
